# nginx.static.conf
# Use Dockerâ€™s embedded DNS resolver (127.0.0.11 is the default).
# valid=30s tells Nginx to cache the DNS resolution for 30 seconds, then re-resolve.
resolver 127.0.0.11 valid=30s;

upstream django_backends {
    # Use the service name 'backend' here.
    # Docker's internal DNS will resolve 'backend' to the IP addresses of
    # all containers running for the 'backend' service (e.g., backend-1, backend-2, backend-3).
    # Nginx, with the resolver directive, will then distribute requests among them.
    server backend:8000;
    keepalive 16;
}

server {
    listen 80;
    server_name localhost;

    location / {
        root /usr/share/nginx/html;
        index index.html index.htm;
        try_files $uri $uri/ /index.html;
    }

    location /api/ {
        proxy_pass http://django_backends;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /chat/ {
        proxy_pass http://django_backends/chat/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            add_header Access-Control-Allow-Headers "Authorization, Content-Type";
            return 204;
        }
    }

    location /ws/ {
        proxy_pass http://django_backends;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_buffering off;
    }
}

# keepalive_timeout 1s;
